// Simple DSL for data flow programming
// Test out on https://pest.rs/#editor

// Nodes have the concept of a 'queue'. These are several inputs that may be
// provided by other nodes. Ex. player input is registered, then is added as
// an 'o:(id)' output. This output goes directly into a hash table keyed off
// of the '(id)' of the 'o:(id)' message. The value entry for the hash is a
// queue of logged messages. Whenever the node is finished with it's current
// execution, it reads off the queue once all of it's inputs are ready
// to process. It then executes, and once finished dispatches it's outputs.
// Continuing off of when player input is registered, what would happen is
// as follows:
// 1) OS/main loop polls input, then registers a 'o:mouse_click' output.
// 2) The UI behavior node, waiting for a 'i:mouse_click' input, fires off
// 3) The UI behavior node, finished, sends a 'o:btn_was_clkd' output.
// At the start of the 'main' loop in the
// program, it goes through and attempts to dispatch

// Types
input_type = {^"i"}
output_type = {^"o"}
node_type = {^"node"}
main_type = {^"main"}

// Primitives
number = ${("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)?}
bool = ${^"true" | ^"false"}
string = {"\"" ~ (!"\"" ~ ANY)*  ~ "\""}

// Reserved words
reserved_words = {
input_type
| node_type
| output_type
| main_type
}

// Identifier
identifier = @{ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)*}

// Inputs
input = {input_type ~ ":" ~ output_alias }
input_declaration = { "(" ~ input
~ ("," ~ input)*
~ ")"}

// Outputs
output_alias = {identifier}
output_definition = {output_reference ~ output_alias }
output_reference = {output_type ~ ":" }
output_assignment = {output_definition ~ "=" ~ identifier}
output_declaration = {"(" ~ output_assignment ~ ("," ~ output_assignment)* ~ ")" }

// Execute
execute = {"{" ~ "}"}

// Nodes
node_declaration = {node_type ~ ":" ~ identifier}
node = {node_declaration ~ node_body}
node_body = {
    "{"
    ~ input_declaration
    ~ execute
    ~ output_declaration
    ~ "}"
}

// Main
main = {main_type ~ "{" ~ execute ~ output_declaration ~ "}" }

// Program
program = {(main | node)+}


// System stuff
//COMMENT = { "/" ~ (!"/" ~ ANY) ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }