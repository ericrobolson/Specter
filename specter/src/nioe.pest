// Simple DSL for data flow programming
// Test out on https://pest.rs/#editor

// !! NOTE: This description needs to be updated, but it's the general idea of Nioe (Node-Input-Output-Execute).
// Nodes have the concept of a 'queue'. These are several inputs that may be
// provided by other nodes. Ex. player input is registered, then is added as
// an 'o:(id)' output. This output goes directly into a hash table keyed off
// of the '(id)' of the 'o:(id)' message. The value entry for the hash is a
// queue of logged messages. Whenever the node is finished with it's current
// execution, it reads off the queue once all of it's inputs are ready
// to process. It then executes, and once finished dispatches it's outputs.
// Continuing off of when player input is registered, what would happen is
// as follows:
// 1) OS/main loop polls input, then registers a 'o:mouse_click' output.
// 2) The UI behavior node, waiting for a 'i:mouse_click' input, fires off
// 3) The UI behavior node, finished, sends a 'o:btn_was_clkd' output.
// At the start of the 'main' loop in the
// program, it goes through and attempts to dispatch


/*
// Example starting node:
MAIN {
    input (_)
    output(print)
    execute{
        signal:print = "Hello world";
    }
}


// Example Node: 
foo_bar {
    input (foo, bar)
    output (herp, derp)
    execute {
        signal: herp = foo;
                
        signal: derp = false;    
    }
}


// Example Node: 
herp_derper {
    input (herp, derp)
    output (fin, core:print_value)
    execute {        
        signal: fin = herp;
        signal: print_value = "Some Derp";
    }
}

// Example of how a 'println' node may work
println {
    input (print_value)
    output (_)
    execute {
        /* This is an example comment*/
        inject {{ println!(print_value); }};
        signal:_ = ();
    }
}


*/

// Types
input_type = {^"input"}
output_type = {^"output"}
execute_type = {^"execute"}
signal_type = {^"signal"}
//v2: store_type = {^"store"}
//v2: spawn_type = {^"spawn"}

// Primitives
number = ${("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)?}
bool = ${^"true" | ^"false"}
string = {"\"" ~ (!"\"" ~ ANY)*  ~ "\""}
reference = {identifier}
array = {"[" ~ "]"}
//message = {"{" ~ identifier+ ~ "}"}
//v2: silent_type = {"_"}

primitive = {number | bool | string | reference | array 
//| message 
}

// Reserved words
reserved_words = {
input_type
| output_type
| signal_type
| execute_type
//v2:| inject_type
//v2: | store_type
//v2: | spawn_type
}

// Identifier
identifier = @{!reserved_words ~ ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)*}

// Inputs
input = {output_alias 
    // v2: ~ array? 
    }
input_declaration = { input_type ~ "(" 
	~ (  //v2: silent_type | 
    	input
    ) 
    ~ ("," ~ input)* ~ ")"}

// Outputs
output_alias = {identifier}
output_definition = {output_reference ~ output_alias }
output_reference = {output_type }
output_declaration = {(output_type ~ "(" ~ 
	(//v2: silent_type | 
    (output_alias ~ ("," ~ output_alias)*)) 
    ~  ")"
    ) 
  }

// Injected code
//v2?: injected_code = { injected_statement ~ end_statement }
//v2?:injected_statement = {"??{" ~ (!"}??" ~ ANY)* ~  "}??"}
//v2?:inject_type = {^"inject"}
//v2?:injected_include = {inject_type ~ injected_statement}

// Execute
execute_declaration = {execute_type ~ "{" ~ statement* ~ "}"}
statement = {(
	signal 
    //v2?:| injected_code 
    | expr
    ) ~ end_statement
  }

expr = {^"if"}

end_statement = { ";"}

// Signals
//v2signal_silent = {silent_type ~ "=" ~ "(" ~ ")"}
signal_output = {output_alias ~ "=" ~ primitive}
signal = {signal_type ~ ":" ~ (
	//v2:signal_silent | !signal_silent ~ 
    signal_output)}

// Store
//v2: store_declaration = { store_type ~ "(" ~ (store ~ ("," ~ store)*) ~ ")"}
//v2: store = {identifier ~ "=" ~ primitive }

// Nodes
node_declaration = {identifier}
node = {node_declaration ~ node_body}
node_body = {
    "{"
     ~ input_declaration?
    //v2: ~ store_declaration?
    ~ output_declaration
    //v2:~ injected_include?
    ~ execute_declaration    
    ~ "}"
}

// Program
program = {(node)* ~ EOI}


// System stuff
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }